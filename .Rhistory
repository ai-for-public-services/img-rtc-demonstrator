Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="oxford") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# do the 2017/2020 data in a similar manner
crashes20_oxf <- crashes20_oxf %>% mutate(
surface=if_else(road_surface_conditions=="Dry","dry","wet"),
light=if_else(light_conditions=="Daylight","Light","Dark"),
# pedestrian=if_else(Pedestrian==0,0,1),
# cycle=if_else(Cycles==0,0,1),
# time?
Time=lubridate::hour(lubridate::hms(time)),
time_of_day=case_when(
Time<5~"Night",
Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="oxford") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# do the 2017/2020 data in a similar manner
crashes17_glo <- crashes17_glo %>% mutate(
surface=if_else(road_surface_conditions=="Dry","dry","wet"),
light=if_else(light_conditions=="Daylight","Light","Dark"),
# pedestrian=if_else(Pedestrian==0,0,1),
# cycle=if_else(Cycles==0,0,1),
# time?
Time=lubridate::hour(lubridate::hms(time)),
time_of_day=case_when(
Time<5~"Night",
Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="gloucester") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# do the 2017/2020 data in a similar manner
crashes18_glo <- crashes18_glo %>% mutate(
surface=if_else(road_surface_conditions=="Dry","dry","wet"),
light=if_else(light_conditions=="Daylight","Light","Dark"),
# pedestrian=if_else(Pedestrian==0,0,1),
# cycle=if_else(Cycles==0,0,1),
# time?
Time=lubridate::hour(lubridate::hms(time)),
time_of_day=case_when(
Time<5~"Night",
Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="gloucester") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# do the 2017/2020 data in a similar manner
crashes19_glo <- crashes19_glo %>% mutate(
surface=if_else(road_surface_conditions=="Dry","dry","wet"),
light=if_else(light_conditions=="Daylight","Light","Dark"),
# pedestrian=if_else(Pedestrian==0,0,1),
# cycle=if_else(Cycles==0,0,1),
# time?
Time=lubridate::hour(lubridate::hms(time)),
time_of_day=case_when(
Time<5~"Night",
Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="gloucester") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# do the 2017/2020 data in a similar manner
crashes20_glo <- crashes20_glo %>% mutate(
surface=if_else(road_surface_conditions=="Dry","dry","wet"),
light=if_else(light_conditions=="Daylight","Light","Dark"),
# pedestrian=if_else(Pedestrian==0,0,1),
# cycle=if_else(Cycles==0,0,1),
# time?
Time=lubridate::hour(lubridate::hms(time)),
time_of_day=case_when(
Time<5~"Night",
Time>=5 & Time<10 ~"Morning",
Time>=10 & Time<15 ~"Middle of Day",
Time>=15 & Time<20 ~"Afternoon/Evening",
Time>=20 ~"Night"),
year=accident_year,
city="gloucester") %>% select(
time_of_day,surface,accident_severity,light,speed_limit,number_of_vehicles,
number_of_casualties,accident_index,year,cyclist,pedestrian,motorcycle) %>% janitor::clean_names() %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2]) %>% st_drop_geometry()
# combine to save
crashes_all <- bind_rows(crashes17_cam,
crashes18_cam,
crashes19_cam,
crashes20_cam,
crashes17_oxf,
crashes18_oxf,
crashes19_oxf,
crashes20_oxf,
crashes17_glo,
crashes18_glo,
crashes19_glo,
crashes20_glo)
View(crashes_all)
unique(crashes_all)
unique(crashes_all$accident_index)
# SAVE FINAL RTC FILES
# cam_rtc<-bind_rows(rtc_2016,rtc_all_2017,rtc_all_2020)
# cam_rtc <- cam_rtc %>%
#   mutate(lon = st_coordinates(.)[,1],
#          lat = st_coordinates(.)[,2])
#
# cam_rtc <- cam_rtc %>% st_drop_geometry()
write.csv(crashes_all,"data/processed/rtc/all-rtc.csv",row.names = F)
# Load Dependencies
library(tidyverse)
library(terra)
library(sf)
library(sp)
# Load Dependencies
library(tidyverse)
library(terra)
library(sf)
library(sp)
# create a function to select points from the roads file
generate_sample_ids <- function(file_name="data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
point_density=1/100,
total_extent=c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000)){
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf(file_name)
# transform to BNG
roads <- st_transform(roads, crs=27700)
# will experiment with the OSM road shapefile as well as the OS roads file
# crop roads to the extent of my images
roads <- st_crop(roads,st_bbox(total_extent))
# for OSM remove paths unsuitable for cars https://download.geofabrik.de/osm-data-in-gis-formats-free.pdf
roads <- roads %>% filter(!fclass %in% c(
"footway","bridleway","cycleway","steps"))
# getting rid of these tiny roads as well - appear to be private anyways
roads <- roads %>% filter(str_detect(fclass,"track")==FALSE)
# ensure road file is in linestring
roads <- st_cast(st_cast(roads, "MULTILINESTRING"),"LINESTRING") # have to double cast to avoid losing information
#osm_roads <- st_cast(osm_roads,"LINESTRING")
sampled_points <- st_line_sample(roads, density = point_density) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
# 5,935 roads, one point every 10m gives 62,425 points
# 5,935 roads, one point every 25m gives 24,961 points
# 5,935 roads, one point every 50m gives 12,459 points
# 5,935 roads, one point every 100m gives 6,145 points
return(sampled_points)
}
df <- read_csv("data/processed/rtc/all-rtc.csv")
names(df)
head(df)
table(df$time_of_day)
table(df$accident_severity)
table(df$number_of_vehicles)
table(df$number_of_casualties)
table(df$speed_limit)
# Spatial Join based on some sort of set of rules
create_outcome_data <- function(road_network_path = "data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
aerial_image_extent = c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000),
sampled_point_density = 1/50,
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50 # number in meters
){
# Sample Points
sampled_points <- generate_sample_ids(file_name=road_network_path,
point_density=sampled_point_density,
total_extent=aerial_image_extent)
sampled_points <- st_as_sf(sampled_points) # need this for the join later
sampled_points$point_id <- 1:nrow(sampled_points)
# Read in the RTC data
rtc_data <- read_csv(rtc_data_path)
#rtc_data$rtc_id <- 1:nrow(rtc_data)
# Convert to a spatial object
rtc_data <- st_as_sf(rtc_data,coords = c("lon","lat"),crs=st_crs(27700))
# Create buffers around each collision point
rtc_data_buffer <- st_buffer(rtc_data, collision_buffer)
# Join the buffers with the sampled points
out_df <- st_join(sampled_points,rtc_data_buffer)
# only keep points that have at least one RTC
out_df <- out_df %>% filter(is.na(year)==FALSE) %>% st_drop_geometry()
out_df_long <- out_df %>% mutate(across(everything(), as.character))
out_df_long <- out_df_long %>% pivot_longer(
!point_id
)
out_df_long <- out_df_long %>% mutate(
night_count = if_else(name=="time_of_day" & value=="Night",1,0),
morning_count = if_else(name=="time_of_day" & value=="Morning",1,0),
afternoon_evening_count = if_else(name=="time_of_day" & value=="Afternoon/Evening",1,0),
mid_of_day_count = if_else(name=="time_of_day" & value=="Middle of Day",1,0),
wet_count = if_else(name=="surface" & value=="wet",1,0),
cycle_count = if_else(name=="cyclist" & value=="1",1,0),
pedestrian_count = if_else(name=="pedestrian" & value=="1",1,0),
motorcycle_count = if_else(name=="motorcycle" & value=="1",1,0),
serious_count = if_else(name=="accident_severity" & (
value=="Fatal" | value=="Serious"),1,0),
dark_count = if_else(name=="light" & value=="Dark",1,0),
multi_vehicle_count = if_else(name=="number_vehicles" &
(value=="2" | value=="3" | value=="4" | value=="5" |value=="6" |value=="7" |value=="10" ),1,0),
speed_above30_count = if_else(name=="speed_limit" &  (
value=="40" | value=="50"| value=="60"| value=="70"),1,0)
)
out_df_wide <- out_df_long %>% select(-value,-name) %>% group_by(
point_id) %>% summarise(across(everything(), list(sum)))
names(out_df_wide)<- gsub("_1","",names(out_df_wide))
count_per_year <- out_df %>% group_by(point_id,year) %>% summarise(
rtc_count_by_year=n()) %>% ungroup() %>% pivot_wider(
id_cols = point_id,
names_from =year,
names_prefix = "rtc_year_",
values_from =rtc_count_by_year,
values_fill =0)
count_total <- out_df %>% group_by(point_id) %>% summarise(rtc_count_total=n())
out_df_wide$point_id <- as.numeric(as.character(out_df_wide$point_id))
out_df_wide <- left_join(out_df_wide,count_per_year,by=c("point_id"))
out_df_wide <- left_join(out_df_wide,count_total,by=c("point_id"))
return(out_df_wide)
}
rm(df)
# Load Dependencies
library(tidyverse)
library(terra)
library(sf)
library(sp)
# create a function to select points from the roads file
generate_sample_ids <- function(file_name="data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
point_density=1/100,
total_extent=c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000)){
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf(file_name)
# transform to BNG
roads <- st_transform(roads, crs=27700)
# will experiment with the OSM road shapefile as well as the OS roads file
# crop roads to the extent of my images
roads <- st_crop(roads,st_bbox(total_extent))
# for OSM remove paths unsuitable for cars https://download.geofabrik.de/osm-data-in-gis-formats-free.pdf
roads <- roads %>% filter(!fclass %in% c(
"footway","bridleway","cycleway","steps"))
# getting rid of these tiny roads as well - appear to be private anyways
roads <- roads %>% filter(str_detect(fclass,"track")==FALSE)
# ensure road file is in linestring
roads <- st_cast(st_cast(roads, "MULTILINESTRING"),"LINESTRING") # have to double cast to avoid losing information
#osm_roads <- st_cast(osm_roads,"LINESTRING")
sampled_points <- st_line_sample(roads, density = point_density) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
# 5,935 roads, one point every 10m gives 62,425 points
# 5,935 roads, one point every 25m gives 24,961 points
# 5,935 roads, one point every 50m gives 12,459 points
# 5,935 roads, one point every 100m gives 6,145 points
return(sampled_points)
}
# Spatial Join based on some sort of set of rules
create_outcome_data <- function(road_network_path = "data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
aerial_image_extent = c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000),
sampled_point_density = 1/50,
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50 # number in meters
){
# Sample Points
sampled_points <- generate_sample_ids(file_name=road_network_path,
point_density=sampled_point_density,
total_extent=aerial_image_extent)
sampled_points <- st_as_sf(sampled_points) # need this for the join later
sampled_points$point_id <- 1:nrow(sampled_points)
# Read in the RTC data
rtc_data <- read_csv(rtc_data_path)
#rtc_data$rtc_id <- 1:nrow(rtc_data)
# Convert to a spatial object
rtc_data <- st_as_sf(rtc_data,coords = c("lon","lat"),crs=st_crs(27700))
# Create buffers around each collision point
rtc_data_buffer <- st_buffer(rtc_data, collision_buffer)
# Join the buffers with the sampled points
out_df <- st_join(sampled_points,rtc_data_buffer)
# only keep points that have at least one RTC
out_df <- out_df %>% filter(is.na(year)==FALSE) %>% st_drop_geometry()
out_df_long <- out_df %>% mutate(across(everything(), as.character))
out_df_long <- out_df_long %>% pivot_longer(
!point_id
)
out_df_long <- out_df_long %>% mutate(
night_count = if_else(name=="time_of_day" & value=="Night",1,0),
morning_count = if_else(name=="time_of_day" & value=="Morning",1,0),
afternoon_evening_count = if_else(name=="time_of_day" & value=="Afternoon/Evening",1,0),
mid_of_day_count = if_else(name=="time_of_day" & value=="Middle of Day",1,0),
wet_count = if_else(name=="surface" & value=="wet",1,0),
cycle_count = if_else(name=="cyclist" & value=="1",1,0),
pedestrian_count = if_else(name=="pedestrian" & value=="1",1,0),
motorcycle_count = if_else(name=="motorcycle" & value=="1",1,0),
serious_count = if_else(name=="accident_severity" & (
value=="Fatal" | value=="Serious"),1,0),
dark_count = if_else(name=="light" & value=="Dark",1,0),
multi_vehicle_count = if_else(name=="number_vehicles" &
(value=="2" | value=="3" | value=="4" | value=="5" |value=="6" |value=="7" |value=="10" ),1,0),
speed_above30_count = if_else(name=="speed_limit" &  (
value=="40" | value=="50"| value=="60"| value=="70"),1,0)
)
out_df_wide <- out_df_long %>% select(-value,-name) %>% group_by(
point_id) %>% summarise(across(everything(), list(sum)))
names(out_df_wide)<- gsub("_1","",names(out_df_wide))
count_per_year <- out_df %>% group_by(point_id,year) %>% summarise(
rtc_count_by_year=n()) %>% ungroup() %>% pivot_wider(
id_cols = point_id,
names_from =year,
names_prefix = "rtc_year_",
values_from =rtc_count_by_year,
values_fill =0)
count_total <- out_df %>% group_by(point_id) %>% summarise(rtc_count_total=n())
out_df_wide$point_id <- as.numeric(as.character(out_df_wide$point_id))
out_df_wide <- left_join(out_df_wide,count_per_year,by=c("point_id"))
out_df_wide <- left_join(out_df_wide,count_total,by=c("point_id"))
return(out_df_wide)
}
glo_rtc <- create_outcome_data(road_network_path = "data/raw/gloucester_osm_roads_full.shp",
aerial_image_extent = c(xmin = 379000, xmax = 389000, ymax = 222000, ymin = 212000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/cam-rtc.csv",
collision_buffer = 50)
road_network_path = "data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
road_network_path = "data/raw/gloucester_osm_roads_full.shp"
aerial_image_extent = c(xmin = 379000, xmax = 389000, ymax = 222000, ymin = 212000)
sampled_point_density = 1/50
rtc_data_path = "data/processed/rtc/cam-rtc.csv"
collision_buffer = 50
# Sample Points
sampled_points <- generate_sample_ids(file_name=road_network_path,
point_density=sampled_point_density,
total_extent=aerial_image_extent)
sampled_points <- st_as_sf(sampled_points) # need this for the join later
sampled_points$point_id <- 1:nrow(sampled_points)
# Read in the RTC data
rtc_data <- read_csv(rtc_data_path)
# Convert to a spatial object
rtc_data <- st_as_sf(rtc_data,coords = c("lon","lat"),crs=st_crs(27700))
# Create buffers around each collision point
rtc_data_buffer <- st_buffer(rtc_data, collision_buffer)
# Join the buffers with the sampled points
out_df <- st_join(sampled_points,rtc_data_buffer)
names(out_df)
# create a function to select points from the roads file
generate_sample_ids <- function(file_name="data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
point_density=1/100,
total_extent=c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000)){
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf(file_name)
# transform to BNG
roads <- st_transform(roads, crs=27700)
# will experiment with the OSM road shapefile as well as the OS roads file
# crop roads to the extent of my images
roads <- st_crop(roads,st_bbox(total_extent))
# for OSM remove paths unsuitable for cars https://download.geofabrik.de/osm-data-in-gis-formats-free.pdf
roads <- roads %>% filter(!fclass %in% c(
"footway","bridleway","cycleway","steps"))
# getting rid of these tiny roads as well - appear to be private anyways
roads <- roads %>% filter(str_detect(fclass,"track")==FALSE)
# ensure road file is in linestring
roads <- st_cast(st_cast(roads, "MULTILINESTRING"),"LINESTRING") # have to double cast to avoid losing information
#osm_roads <- st_cast(osm_roads,"LINESTRING")
sampled_points <- st_line_sample(roads, density = point_density) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
# 5,935 roads, one point every 10m gives 62,425 points
# 5,935 roads, one point every 25m gives 24,961 points
# 5,935 roads, one point every 50m gives 12,459 points
# 5,935 roads, one point every 100m gives 6,145 points
return(sampled_points)
}
# Spatial Join based on some sort of set of rules
create_outcome_data <- function(road_network_path = "data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp",
aerial_image_extent = c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000),
sampled_point_density = 1/50,
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50 # number in meters
){
# Sample Points
sampled_points <- generate_sample_ids(file_name=road_network_path,
point_density=sampled_point_density,
total_extent=aerial_image_extent)
sampled_points <- st_as_sf(sampled_points) # need this for the join later
sampled_points$point_id <- 1:nrow(sampled_points)
# Read in the RTC data
rtc_data <- read_csv(rtc_data_path)
#rtc_data$rtc_id <- 1:nrow(rtc_data)
# Convert to a spatial object
rtc_data <- st_as_sf(rtc_data,coords = c("lon","lat"),crs=st_crs(27700))
# Create buffers around each collision point
rtc_data_buffer <- st_buffer(rtc_data, collision_buffer)
# Join the buffers with the sampled points
out_df <- st_join(sampled_points,rtc_data_buffer)
# only keep points that have at least one RTC
out_df <- out_df %>% filter(is.na(year)==FALSE) %>% st_drop_geometry()
out_df_long <- out_df %>% mutate(across(everything(), as.character))
out_df_long <- out_df_long %>% pivot_longer(
!point_id
)
out_df_long <- out_df_long %>% mutate(
night_count = if_else(name=="time_of_day" & value=="Night",1,0),
morning_count = if_else(name=="time_of_day" & value=="Morning",1,0),
afternoon_evening_count = if_else(name=="time_of_day" & value=="Afternoon/Evening",1,0),
mid_of_day_count = if_else(name=="time_of_day" & value=="Middle of Day",1,0),
wet_count = if_else(name=="surface" & value=="wet",1,0),
cycle_count = if_else(name=="cyclist" & value=="1",1,0),
pedestrian_count = if_else(name=="pedestrian" & value=="1",1,0),
motorcycle_count = if_else(name=="motorcycle" & value=="1",1,0),
serious_count = if_else(name=="accident_severity" & (
value=="Fatal" | value=="Serious"),1,0),
dark_count = if_else(name=="light" & value=="Dark",1,0),
multi_vehicle_count = if_else(name=="number_vehicles" &
(value=="2" | value=="3" | value=="4" | value=="5" |value=="6" |value=="7" |value=="10" ),1,0),
speed_above30_count = if_else(name=="speed_limit" &  (
value=="40" | value=="50"| value=="60"| value=="70"),1,0)
)
out_df_wide <- out_df_long %>% select(-value,-name) %>% group_by(
point_id) %>% summarise(across(everything(), list(sum)))
names(out_df_wide)<- gsub("_1","",names(out_df_wide))
count_per_year <- out_df %>% group_by(point_id,year) %>% summarise(
rtc_count_by_year=n()) %>% ungroup() %>% pivot_wider(
id_cols = point_id,
names_from =year,
names_prefix = "rtc_year_",
values_from =rtc_count_by_year,
values_fill =0)
count_total <- out_df %>% group_by(point_id) %>% summarise(rtc_count_total=n())
out_df_wide$point_id <- as.numeric(as.character(out_df_wide$point_id))
out_df_wide <- left_join(out_df_wide,count_per_year,by=c("point_id"))
out_df_wide <- left_join(out_df_wide,count_total,by=c("point_id"))
return(out_df_wide)
}
glo_rtc <- create_outcome_data(road_network_path = "data/raw/gloucester_osm_roads_full.shp",
aerial_image_extent = c(xmin = 379000, xmax = 389000, ymax = 222000, ymin = 212000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50)
View(glo_rtc)
cam_rtc <- create_outcome_data(road_network_path = "data/raw/cambridge_osm_roads_full.shp",
aerial_image_extent = c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50)
oxf_rtc <- create_outcome_data(road_network_path = "data/raw/oxford_osm_roads_full.shp",
aerial_image_extent = c(xmin = 447000, xmax = 457000, ymax = 212000 , ymin = 202000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 50)
# only 1009 unique points had an RTC within 50m
cam_rtc %>% ggplot(aes(rtc_count_total)) +
geom_bar(stat='count', width=.5)  +
geom_text(stat='count', aes(label=..count..), vjust=-1)
glo_rtc <- create_outcome_data(road_network_path = "data/raw/gloucester_osm_roads_full.shp",
aerial_image_extent = c(xmin = 379000, xmax = 389000, ymax = 222000, ymin = 212000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 55)
cam_rtc <- create_outcome_data(road_network_path = "data/raw/cambridge_osm_roads_full.shp",
aerial_image_extent = c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 55)
oxf_rtc <- create_outcome_data(road_network_path = "data/raw/oxford_osm_roads_full.shp",
aerial_image_extent = c(xmin = 447000, xmax = 457000, ymax = 212000 , ymin = 202000),
sampled_point_density = 1/50, # point per meter 1/100 = 1 every 100m
rtc_data_path = "data/processed/rtc/all-rtc.csv",
collision_buffer = 55)
# only 1009 unique points had an RTC within 50m
cam_rtc %>% ggplot(aes(rtc_count_total)) +
geom_bar(stat='count', width=.5)  +
geom_text(stat='count', aes(label=..count..), vjust=-1)
names(cam_rtc)
View(cam_rtc)
paste0(2,"three")
glo_rtc <- glo_rtc %>% mutate(
file_path = paste0("data/processed/glo-2018-25m/gloucester-25m-point-",point_id,".tif")
)
View(glo_rtc)
glo_rtc <- glo_rtc %>% mutate(
file_path = paste0("data/processed/glo-2018-25m/gloucester-25m-point-",point_id,".tif")
)
cam_rtc <- cam_rtc %>% mutate(
file_path = paste0("data/processed/cam-2020-25m/cambridge-25m-point-",point_id,".tif")
)
oxf_rtc <- oxf_rtc %>% mutate(
file_path = paste0("data/processed/oxf-2019-25m/oxford-25m-point-",point_id,".tif")
)
all_rtc <- bind_rows(glo_rtc,cam_rtc,oxf_rtc)
View(all_rtc)
write.csv(all_rtc,"data/processed/rtc/all_rtc_points.csv",row.names = F)
paths <- all_rtc$file_path
paths[1]
terra::vect(paths[1])
test <- terra::rast(paths[1])
image(test)
plot(test)
