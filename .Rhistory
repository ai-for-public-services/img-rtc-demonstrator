# 1. Load in/Generate a clean road shapefile for the area of interest
################################################################################
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf("data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp")
roads
sampled_points <- st_line_sample(roads, density = 1/100)
################################################################################
# 1. Load in/Generate a clean road shapefile for the area of interest
################################################################################
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf("data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp")
# Load Dependencies
library(tidyverse)
library(terra)
library(sf)
library(sp)
################################################################################
# 1. Load in/Generate a clean road shapefile for the area of interest
################################################################################
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf("data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp")
names(roads)
table(roads$CLASSIFICA)
imagelist <- list.files("data/raw/cambridge-rgb/getmapping-rgb-25cm-2016_4700173/tl/") %>% Filter(function(x) {str_detect(x,"jpg")}, .)
imagelist <- unlist(lapply(imagelist, function(i){paste0(
"C:/Users/jfrancis/OneDrive - The Alan Turing Institute/Documents - AI for Government/6-Technical Projects/satellite-image-demonstrator/sat-img-demonstrator/data/raw/cambridge-rgb/getmapping-rgb-25cm-2016_4700173/tl/",i)}))
imagelist
shape_extents <- lapply(shapes, raster::extent)
img_extents <- lapply(imagelist, raster::extent)
stk1 <- terra::rast(imagelist)
allrasters <- lapply(imagelist, terra::rast)
allrasters[1]
rsrc <- sprc(allrasters)
rsrc
st_bbox(rsrc)
raster::extent(rsrc)
m <- merge(rsrc)
ext(allrasters)
ext(allrasters[1])
allrasters
allrasters[1]
allrasters[[1]]
ext(allrasters[[1]])
all_extents <- lapply(allrasters, ext)
all_extents
total_extent <- merge(all_extents)
rsrc <- sprc(all_extents)
rm(rsrc)
m <- do.call(terra::merge, all_extents)
m <- do.call(terra::merge, all_extents)
m <- do.call(terra::merge, all_extents)
m <- lapply(terra::merge, all_extents)
m <- lapply(all_extents,terra::merge)
total <- terra::merge(all_extents)
total <- terra::merge(unlist(all_extents))
unlist(all_extents)
?merge
max(all_extents)
total <- terra::merge(all_extents[[1]],all_extents[[2]])
# drop all of the points that i dont have images
vrtfile <- paste0(tempfile(), ".vrt")
v <- vrt(allrasters, vrtfile)
v <- vrt(imagelist, vrtfile)
head(readLines(vrtfile))
v
allrasters[[1]]
40000/4000
# Load Dependencies
library(tidyverse)
library(terra)
library(sf)
library(sp)
################################################################################
# 1. Load in/Generate a clean road shapefile for the area of interest
################################################################################
# read in the roads shapefile, note that TL correspondonds to the area with Cambridge
roads <- read_sf("data/raw/Download_2087242/open-map-local_4707745/TL_Road.shp")
roads
?st_crop
?st_bbox
roads <- st_crop(roads,st_bbox(c(xmin = 541000, xmax = 551000, ymax = 254000, ymin = 264000)))
plot(roads)
?st_line_sample
sampled_points <- st_line_sample(roads, density = 1/25) # one point every 100 m
sampled_points
View(sampled_points)
plot(sampled_points)
sampled_points <- st_cast(sampled_points, "Point")
sampled_points <- st_cast(sampled_points, "POINT")
sampled_points <- st_line_sample(roads, density = 1/50) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
sampled_points <- st_line_sample(roads, density = 1/10) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
sampled_points <- st_line_sample(roads, density = 1/100) # one point every 25 m
sampled_points <- st_cast(sampled_points, "POINT") # cast to point
plot(sampled_points)
?st_buffer
################################################################################
# 3. Create two square buffers centered around each point
################################################################################
sample_20m_buffer <- st_buffer(sampled_points, 20, nQuadSegs = 1,endCapStyle = "SQUARE")
plot(sample_20m_buffer)
sample_200m_buffer <- st_buffer(sampled_points, 200, nQuadSegs = 1,endCapStyle = "SQUARE")
plot(sample_200m_buffer)
?SpatVector
vect_200m_buffer<- vect(sample_200m_buffer)
#for each image see which of the polygon intersect the img
imagelist <- list.files("data/raw/cambridge-rgb/getmapping-rgb-25cm-2016_4700173/tl/") %>% Filter(function(x) {str_detect(x,"jpg")}, .)
imagelist <- unlist(lapply(imagelist, function(i){paste0(
"C:/Users/jfrancis/OneDrive - The Alan Turing Institute/Documents - AI for Government/6-Technical Projects/satellite-image-demonstrator/sat-img-demonstrator/data/raw/cambridge-rgb/getmapping-rgb-25cm-2016_4700173/tl/",i)}))
allrasters <- lapply(imagelist, terra::rast)
plot(sample_20m_buffer)
plot(sample_200m_buffer)
plot(roads)
roads %>% st_geometry() %>% plot()
################################################################################
# 3. Create two square buffers centered around each point
################################################################################
sample_20m_buffer <- st_buffer(sampled_points, 20, nQuadSegs = 1,endCapStyle = "SQUARE")
plot(sample_20m_buffer)
plot(allrasters[[1]])
terra:intersect(sample_200m_buffer,allrasters[[1]])
terra::intersect(sample_200m_buffer,allrasters[[1]])
allrasters[[1]]
a <- terra::intersect(allrasters[[1]],vect_200m_buffer)
plot(sample_200m_buffer)
plot(allrasters[[1]],add=T)
a
a <- terra::intersect(vect_200m_buffer,allrasters[[1]])
?is.realted
?is.related
a <- terra::is.related(vect_200m_buffer,allrasters[[1]],"intersects")
table(a)
a <- terra::is.related(allrasters[[1]],vect_200m_buffer,"intersects")
a
a
i=1
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects",T)
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects",pairs=T)
point_to_img <- data.frame()
a
allrasters[[1]]
a <- names(paste0(img,i))
a <- names(paste0("img",i))
a
a
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a
a <- list(a)
a
a <- names(paste0("img",i))
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a) <- name(paste0("img",i))
names(a) <- names(paste0("img",i))
a
names(a)
point_to_img <- bind_cols(point_to_img,a)
point_to_img <- bind_rows(point_to_img,a)
point_to_img <- bind_cols(point_to_img,a)
new_df = data.frame('a'=NA)
for(i in 1:10){
new_df[,ncol(new_df)+1] = NA
}
new_df
bind_cols(new_df,a)
1:5935
point_to_img <- data.frame(id=1:5935)
View(point_to_img)
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
point_to_img <- bind_cols(point_to_img,a)
point_to_img <- data.frame(id=1:6145)
point_to_img <- bind_cols(point_to_img,a)
View(point_to_img)
a
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
point_to_img <- bind_cols(point_to_img,a)
View(point_to_img)
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a=paste0("img_",i))
a
i
point_to_img <- bind_cols(point_to_img,a)
View(point_to_img)
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(paste0("img_",i)=a)
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(paste0("img_",i)=a)
a <- list(a)
names(a)
names(a)<- "new_name"
names(a)
a
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img <- bind_cols(point_to_img,a)
View(point_to_img)
point_to_img <- data.frame(id=1:6145)
point_to_img <- data.frame(id=1:6145)
# for each image, what polygon fall within them
for(i in 1:length(allrasters)){
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img <- bind_cols(point_to_img,a)
}
View(point_to_img)
point_to_img <- data.frame(point_id=1:6145)
# for each image, what polygon fall within them
for(i in 1:length(allrasters)){
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img <- bind_cols(point_to_img,a)
}
View(point_to_img)
point_to_img %>% select(-point_id) %>% rowSums()
point_to_img %>% select(-point_id) %>% rowSums() %>% table()
point_to_img_20m <- data.frame(point_id=1:6145)
vect_20m_buffer<- vect(sample_20m_buffer)
point_to_img_20m <- data.frame(point_id=1:6145)
# for each image, what polygon fall within them
for(i in 1:length(allrasters)){
a <- terra::is.related(vect_20m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img_20m <- bind_cols(point_to_img_20m,a)
}
point_to_img_20m %>% select(-point_id) %>% rowSums() %>% table()
View(point_to_img_20m)
coordinates(sampled_points)
st_coordinates(sampled_points)
point_to_img_20m <- data.frame(point_id=1:6145,st_coordinates(sampled_points))
View(point_to_img_20m)
point_to_img_200m <- data.frame(point_id=1:6145,st_coordinates(sampled_points))
# for each image, what polygon fall within them
for(i in 1:length(allrasters)){
a <- terra::is.related(vect_200m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img_200m <- bind_cols(point_to_img_200m,a)
}
point_to_img_200m %>% select(-point_id) %>% rowSums() %>% table()
point_to_img_200m %>% select(-point_id,-X,-Y) %>% rowSums() %>% table()
point_to_img_20m <- data.frame(point_id=1:6145,st_coordinates(sampled_points))
# for each image, what polygon fall within them
for(i in 1:length(allrasters)){
a <- terra::is.related(vect_20m_buffer,allrasters[[i]],"intersects")
a <- list(a)
names(a)<- paste0("img_",i)
point_to_img_20m <- bind_cols(point_to_img_20m,a)
}
point_to_img_20m %>% select(-point_id,-X,-Y) %>% rowSums() %>% table()
# 0    1    2    4
# 588 5163  388    6
# 588 points do not fall within at least one image @ 20m (to be expected)
################################################################################
# 5. Crop the image corresponding to buffers for each point
################################################################################
# For reach point, read in the image(s) that the buffer(s) falls within
for(i in 1:6145){
print(i)
}
# 0    1    2    4
# 588 5163  388    6
# 588 points do not fall within at least one image @ 20m (to be expected)
################################################################################
# 5. Crop the image corresponding to buffers for each point
################################################################################
# For reach point, read in the image(s) that the buffer(s) falls within
for(i in 1:6145){
print()
}
# 0    1    2    4
# 588 5163  388    6
# 588 points do not fall within at least one image @ 20m (to be expected)
################################################################################
# 5. Crop the image corresponding to buffers for each point
################################################################################
# For reach point, read in the image(s) that the buffer(s) falls within
for(i in 1:6145){
print("")
}
point_to_img_20m[1,]
temp_row <- point_to_img_20m[i,]
temp_row
i=1
temp_row <- point_to_img_20m %>% filter(point_id %in% i)
temp_row
temp_row <- point_to_img_20m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
temp_row
temp_row[rowSums(temp_row, na.rm=TRUE) > 0,]
point_to_img_20m  %>% rowSums()
temp_row  %>% rowSums()
temp_row[rowSums(temp_row, na.rm=TRUE) > 0,]
temp_row %>% filter(across(everything())==TRUE)
temp_row %>% filter(across(everything()),~ . == TRUE)
temp_row %>% filter(if_all(everything()),~ . == TRUE)
temp_row %>% filter(if_all(everything(), ~ . == TRUE))
temp_row %>% filter(if_any(everything(), ~ . == TRUE))
temp_row %>% filter(if_any(everything(), ~ . > 0))
temp_row %>% select(where(~ . > 0))
i=5
temp_row <- point_to_img_20m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
temp_row  %>% rowSums()
temp_row[rowSums(temp_row, na.rm=TRUE) > 0,]
temp_row %>% select(where(~ . > 0))
names(temp_row)
temp_row <- temp_row %>% select(where(~ . > 0))
names(temp_row)
gsub("img_","",names(temp_row))
img_list <- gsub("img_","",names(temp_row))
temp_row  %>% rowSums()
temp_row  %>% rowSums() <1
img_list
img_list[1]
img_list[[1]
]
img_list <- as.numeric(gsub("img_","",names(temp_row)))
img_list
temp_img_d <- allrasters[[img_list[[d]]]]
d=1
temp_img_d <- allrasters[[img_list[[d]]]]
View(temp_img_d)
temp_img_d
rm(temp_img_d)
temp_img <- allrasters[[img_list[[d]]]]
assign(paste0("temp_img_",d),temp_img)
length(img_list)
sample_20m_buffer <- sample_20m_buffer %>% mutate(point_id=1:6145)
sample_20m_buffer <- sample_20m_buffer %>% mutate(point_id=1:nrow())
sample_20m_buffer <- sample_20m_buffer %>% mutate(point_id=row_number)
sample_20m_buffer <- sample_20m_buffer %>% mutate(point_id=row_number())
vect_20m_buffer
vect_20m_buffer[1]
vect_20m_buffer[434]
i
temp_buffer <- vect_20m_buffer[i]
plot(temp_buffer)
temp_img <- allrasters[[img_list[[d]]]]
assign(paste0("temp_img_",d),temp_img)
plot(temp_img_1)
plot(temp_buffer,add=T)
temp_img_1 <- crop(temp_img_1, temp_buffer)
plot(temp_img_1)
length(img_list)
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
# assign(paste0("temp_img_",d),temp_img)
merge_list <- append(merge_list, temp_img)
}
img_list
merge_list
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
# assign(paste0("temp_img_",d),temp_img)
merge_list <- append(merge_list, list(temp_img))
}
merge_list
merge_list
merge_list[[1]]
final_temp_img <- crop(merge_list[[1]], temp_buffer)
plot(final_temp_img)
final_temp_img <- crop(merge_list[[2]], temp_buffer)
plot(final_temp_img)
rsrc <- sprc(merge_list)
m <- merge(rsrc)
plot(m)
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(m, temp_buffer)
plot(final_temp_img)
plotRGB(final_temp_img)
# 0    1    2    4
# 588 5163  388    6
# 588 points do not fall within at least one image @ 20m (to be expected)
################################################################################
# 5. Crop the image corresponding to buffers for each point
################################################################################
# For reach point, read in the image(s) that the buffer(s) falls within
# do 20m first
for(i in 1:10){ #6145
print(i)
temp_row <- point_to_img_20m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
if(temp_row  %>% rowSums() <1 ) next # Skip if point doesn't overlap an image
temp_row <- temp_row %>% select(where(~ . > 0))
img_list <- as.numeric(gsub("img_","",names(temp_row)))
# read in all of the images necessary for the given point
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
merge_list <- append(merge_list, list(temp_img))
}
# if only one image things are super easy, just crop the image to the pointid of the buffer
if(length(img_list)==1){
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(merge_list[[1]], temp_buffer)
}
# if multiple images, merge all of them together, and crop the larger image to the pointid of the buffer
if(length(img_list)>=1){
rsrc <- sprc(merge_list)
m <- merge(rsrc)
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(m, temp_buffer)
}
# Save images
writeRaster(final_temp_img, paste0("data/processed/cam-2017/","cambdrige-20m-point-",i,".tif"), overwrite=FALSE, ...)
}
paste0("data/processed/cam-2017/","cambdrige-20m-point-",i,".tif")
# 0    1    2    4
# 588 5163  388    6
# 588 points do not fall within at least one image @ 20m (to be expected)
################################################################################
# 5. Crop the image corresponding to buffers for each point
################################################################################
# For reach point, read in the image(s) that the buffer(s) falls within
# do 20m first
for(i in 1:10){ #6145
print(i)
temp_row <- point_to_img_20m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
if(temp_row  %>% rowSums() <1 ) next # Skip if point doesn't overlap an image
temp_row <- temp_row %>% select(where(~ . > 0))
img_list <- as.numeric(gsub("img_","",names(temp_row)))
# read in all of the images necessary for the given point
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
merge_list <- append(merge_list, list(temp_img))
}
# if only one image things are super easy, just crop the image to the pointid of the buffer
if(length(img_list)==1){
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(merge_list[[1]], temp_buffer)
}
# if multiple images, merge all of them together, and crop the larger image to the pointid of the buffer
if(length(img_list)>=1){
rsrc <- sprc(merge_list)
m <- merge(rsrc)
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(m, temp_buffer)
}
# Save images
writeRaster(final_temp_img, paste0("data/processed/cam-2017/","cambdrige-20m-point-",i,".tif"), overwrite=FALSE)
}
test <- raster::stack("data/processed/cam-2017/cambdrige-20m-point-3.tif")
test
plot(test)
plotRGB(test)
start_time <- Sys.time()
for(i in 1:6145){
print(i)
temp_row <- point_to_img_20m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
if(temp_row  %>% rowSums() <1 ) next # Skip if point doesn't overlap an image
temp_row <- temp_row %>% select(where(~ . > 0))
img_list <- as.numeric(gsub("img_","",names(temp_row)))
# read in all of the images necessary for the given point
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
merge_list <- append(merge_list, list(temp_img))
}
# if only one image things are super easy, just crop the image to the pointid of the buffer
if(length(img_list)==1){
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(merge_list[[1]], temp_buffer)
}
# if multiple images, merge all of them together, and crop the larger image to the pointid of the buffer
if(length(img_list)>=1){
rsrc <- sprc(merge_list)
m <- merge(rsrc)
temp_buffer <- vect_20m_buffer[i]
final_temp_img <- crop(m, temp_buffer)
}
# Save images
writeRaster(final_temp_img, paste0("data/processed/cam-2017-20m/","cambdrige-20m-point-",i,".tif"), overwrite=FALSE)
}
end_time <- Sys.time()
loop_time_20m <- end_time - start_time
# next do 200m
start_time <- Sys.time()
for(i in 1:6145){
print(i)
temp_row <- point_to_img_200m %>% filter(point_id %in% i) %>% select(-point_id,-X,-Y)
if(temp_row  %>% rowSums() <1 ) next # Skip if point doesn't overlap an image
temp_row <- temp_row %>% select(where(~ . > 0))
img_list <- as.numeric(gsub("img_","",names(temp_row)))
# read in all of the images necessary for the given point
merge_list = list()
for(d in 1:length(img_list)){
temp_img <- allrasters[[img_list[[d]]]]
merge_list <- append(merge_list, list(temp_img))
}
# if only one image things are super easy, just crop the image to the pointid of the buffer
if(length(img_list)==1){
temp_buffer <- vect_200m_buffer[i]
final_temp_img <- crop(merge_list[[1]], temp_buffer)
}
# if multiple images, merge all of them together, and crop the larger image to the pointid of the buffer
if(length(img_list)>=1){
rsrc <- sprc(merge_list)
m <- merge(rsrc)
temp_buffer <- vect_200m_buffer[i]
final_temp_img <- crop(m, temp_buffer)
}
# Save images
writeRaster(final_temp_img, paste0("data/processed/cam-2017-200m/","cambdrige-200m-point-",i,".tif"), overwrite=FALSE)
}
